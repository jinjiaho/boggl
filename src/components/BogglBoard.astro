---

---

<astro-boggl class="boggl">
  <header class="boggl-title">
    <h1>BOGGLR</h1>
  </header>
  <div class="boggl-board">
    <div class="boggl-base">
      <div class="boggl-cover">
        <p class="boggl-status" aria-live="polite"></p>
      </div>
      <div class="boggl-grid"></div>
    </div>
  </div>
  <div class="boggl-controls">
    <div class="boggl-timer" aria-live="polite"></div>
    <div class="boggl-btns">
      <button role="button" class="boggl-reset-btn" disabled>Reset</button>
      <button role="button" class="boggl-start-btn">Start!</button>
    </div>
  </div>
</astro-boggl>
<script>
  import { CUBES, ROUND_LENGTH_MINS } from "../config";
  import { Chance } from "chance";
  import {
    add,
    compareAsc,
    differenceInSeconds,
    secondsToMinutes,
  } from "date-fns";
  import type { CubeType } from "../types";

  class Boggl extends HTMLElement {
    constructor() {
      super();
      const chance = new Chance();
      const cover = this.querySelector(".boggl-cover") as HTMLDivElement;
      const status = this.querySelector(".boggl-status") as HTMLElement;
      const grid = this.querySelector(".boggl-grid") as HTMLDivElement;
      const timer = this.querySelector(".boggl-timer") as HTMLDivElement;
      const startBtn = this.querySelector(
        ".boggl-start-btn",
      ) as HTMLButtonElement;
      const resetBtn = this.querySelector(
        ".boggl-reset-btn",
      ) as HTMLButtonElement;
      let isShaking = false;
      let isCounting = false;

      init();

      function init() {
        startBtn.addEventListener("click", function () {
          startRound();
        });
        resetBtn.addEventListener("click", function () {
          reset();
        });

        shakeBoard();
      }

      function setReady() {
        status.textContent = "Ready";
        timer.textContent = `${ROUND_LENGTH_MINS}:00`;
      }

      async function startRound() {
        if (isShaking) return;
        isCounting = true;
        const roundEnd = add(new Date(), { minutes: ROUND_LENGTH_MINS });
        cover.classList.add("hide");
        startBtn.setAttribute("disabled", "true");
        resetBtn.removeAttribute("disabled");
        let now = new Date();
        while (compareAsc(now, roundEnd) < 0) {
          now = await tick();
          if (!isCounting) return;
          const diffSeconds = differenceInSeconds(roundEnd, now, {
            roundingMethod: "floor",
          });
          timer.textContent = formatCountdown(diffSeconds);
        }
        isCounting = false;
        timer.classList.add("red");
        timer.textContent = "Time's up!";
      }

      function reset() {
        resetBtn.setAttribute("disabled", "true");
        isCounting = false;
        shakeBoard();
      }

      async function tick() {
        return new Promise<Date>((resolve) => {
          setTimeout(function () {
            const now = new Date();
            resolve(now);
          }, 999);
        });
      }

      function formatCountdown(seconds: number) {
        const minutes = secondsToMinutes(seconds);
        const leftover = seconds - minutes * 60;
        return `${minutes}:${String(leftover).padStart(2, "0")}`;
      }

      function shakeBoard() {
        startBtn.removeAttribute("disabled");
        timer.textContent = ":";
        status.textContent = "Shaking...";
        const cubes: CubeType[] = [...CUBES];
        cover.classList.remove("hide");
        grid.innerHTML = "";
        isShaking = true;
        while (cubes.length) {
          const pickedCube = pickCube(cubes);
          const pickedSide = pickSide(pickedCube.cube);
          addCube(pickedSide);
          cubes.splice(pickedCube.index, 1);
        }
        isShaking = false;
        setTimeout(() => {
          setReady();
        }, 1000);
      }

      function pickCube(cubeArray: CubeType[]) {
        const index = chance.integer({ min: 0, max: cubeArray.length - 1 });
        return {
          index,
          cube: cubeArray[index],
        };
      }

      function pickSide(cube: CubeType) {
        const side = chance.integer({ min: 0, max: 5 });
        return cube[side];
      }

      function addCube(char: string) {
        const cubeSpace = document.createElement("div");
        cubeSpace.classList.add("boggl-cube-space");
        const cubeOuter = document.createElement("div");
        cubeOuter.classList.add("boggl-cube");
        const cubeInner = document.createElement("div");
        cubeInner.classList.add("boggl-cube__inner");
        cubeInner.textContent = char;
        cubeOuter.appendChild(cubeInner);
        cubeSpace.appendChild(cubeOuter);
        grid.appendChild(cubeSpace);
      }
    }
  }
  customElements.define("astro-boggl", Boggl);
</script>
<style is:global>
  .boggl {
    --scale: min(4svh, 5vw);
    width: 100%;
    padding: var(--scale);
    display: grid;
    grid-template-areas:
      "title"
      "board"
      "controls";
    box-sizing: border-box;
    color: darkblue;
    grid-gap: calc(var(--scale) * 2);

    @media screen and (orientation: landscape) {
      --scale: min(4svh, 2.5vw);
      grid-template-rows: calc(var(--scale) * 5) auto;
      grid-template-areas:
        "board title"
        "board controls";
      grid-column-gap: calc(var(--scale) * 3);
      width: fit-content;
    }

    @media screen and (min-width: 768px) {
      .boggl {
        --scale: max(4svh, 3vw);
      }
    }

    @media screen and (min-width: 967px) {
      .boggl {
        --scale: max(4svh, 2.5vw);
      }
    }
  }
  .boggl-controls {
    grid-area: controls;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-evenly;
    gap: 1rem;
    text-align: center;
  }

  .boggl-title {
    grid-area: title;
    font-size: var(--scale);
    text-decoration: underline;
    margin: 0;
    text-align: center;
    height: fit-content;
  }

  .boggl-board {
    grid-area: board;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .boggl-base {
    --frame-thickness: calc(var(--scale) / 8);
    --frame-color: #5353de;
    --frame-shadow: midnightblue;
    --font-size: calc(var(--scale) * 2);
    position: relative;
    border-radius: var(--scale);
    padding: calc(var(--scale) / 2);
    background-color: var(--frame-shadow);
    width: fit-content;
    height: fit-content;
    border: var(--frame-thickness) solid var(--frame-color);
    overflow: hidden;
  }

  .boggl-cover {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.8);
    box-shadow: inset 0 0 calc(var(--scale) * 8) rgba(0, 0, 255, 0.3);
    backdrop-filter: blur(calc(var(--scale) * 0.7));
    z-index: 2;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .boggl-status {
    font-size: calc(var(--scale) * 2);
    font-weight: 700;
  }

  .boggl-grid {
    --cell-size: calc(var(--font-size) * 2);
    display: grid;
    grid-template-rows: repeat(4, var(--cell-size));
    grid-template-columns: repeat(4, var(--cell-size));
    grid-gap: var(--frame-thickness);
    padding: var(--frame-thickness);
    background-color: var(--frame-color);
    border-radius: calc(var(--scale) / 8);
  }

  .boggl-cube-space {
    background-color: var(--frame-shadow);
    padding: calc(var(--scale) / 6);
  }

  .boggl-cube {
    background-color: tan;
    width: 100%;
    height: 100%;
    border-radius: calc(var(--scale) / 8);
  }

  .boggl-cube__inner {
    background-color: antiquewhite;
    border-radius: var(--scale);
    color: darkblue;
    text-align: center;
    font-size: var(--font-size);
    line-height: 1.4;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-weight: 700;
  }

  .boggl-timer {
    font-size: calc(var(--scale) * 2);
    font-weight: 700;
    padding: 1rem 0;
  }

  .boggl-btns {
    display: flex;
    justify-content: space-evenly;
    align-items: stretch;
    flex-direction: column-reverse;
    align-self: stretch;
    gap: calc(var(--scale) / 2);
  }

  .boggl-btns > button {
    padding: calc(var(--scale) * 0.6) calc(var(--scale) * 2);
    color: white;
    border-radius: calc(var(--scale) * 0.5);
    font-size: var(--scale);
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.1rem;
    line-height: 1.4;
    border: none;
    box-shadow: inset 0 -0.125rem 0.5rem rgba(15, 15, 15, 0.2);
    cursor: pointer;
  }

  .boggl-start-btn {
    background-color: mediumblue;
  }

  .boggl-reset-btn {
    background-color: firebrick;
  }

  .boggl-btns > button:disabled {
    filter: grayscale(1) contrast(0.5);
    cursor: disabled;
  }

  .hide {
    display: none;
  }

  .red {
    color: darkred;
  }
</style>
